'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class XMLSchema1
    Inherits DataSet
    
    Private tableДом As ДомDataTable
    
    Private tableПодвал As ПодвалDataTable
    
    Private tableПодвПомещение As ПодвПомещениеDataTable
    
    Private tableЧердак As ЧердакDataTable
    
    Private tableПодъезд As ПодъездDataTable
    
    Private tableЭтаж As ЭтажDataTable
    
    Private tableКвартира As КвартираDataTable
    
    Private tableКомната As КомнатаDataTable
    
    Private tableКрыша As КрышаDataTable
    
    Private relationПодвал_ПодвПомещение As DataRelation
    
    Private relationКвартира_Комната As DataRelation
    
    Private relationЭтаж_Квартира As DataRelation
    
    Private relationПодъезд_Этаж As DataRelation
    
    Private relationДом_Подвал As DataRelation
    
    Private relationДом_Чердак As DataRelation
    
    Private relationДом_Подъезд As DataRelation
    
    Private relationДом_Крыша As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Дом")) Is Nothing) Then
                Me.Tables.Add(New ДомDataTable(ds.Tables("Дом")))
            End If
            If (Not (ds.Tables("Подвал")) Is Nothing) Then
                Me.Tables.Add(New ПодвалDataTable(ds.Tables("Подвал")))
            End If
            If (Not (ds.Tables("ПодвПомещение")) Is Nothing) Then
                Me.Tables.Add(New ПодвПомещениеDataTable(ds.Tables("ПодвПомещение")))
            End If
            If (Not (ds.Tables("Чердак")) Is Nothing) Then
                Me.Tables.Add(New ЧердакDataTable(ds.Tables("Чердак")))
            End If
            If (Not (ds.Tables("Подъезд")) Is Nothing) Then
                Me.Tables.Add(New ПодъездDataTable(ds.Tables("Подъезд")))
            End If
            If (Not (ds.Tables("Этаж")) Is Nothing) Then
                Me.Tables.Add(New ЭтажDataTable(ds.Tables("Этаж")))
            End If
            If (Not (ds.Tables("Квартира")) Is Nothing) Then
                Me.Tables.Add(New КвартираDataTable(ds.Tables("Квартира")))
            End If
            If (Not (ds.Tables("Комната")) Is Nothing) Then
                Me.Tables.Add(New КомнатаDataTable(ds.Tables("Комната")))
            End If
            If (Not (ds.Tables("Крыша")) Is Nothing) Then
                Me.Tables.Add(New КрышаDataTable(ds.Tables("Крыша")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Дом As ДомDataTable
        Get
            Return Me.tableДом
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Подвал As ПодвалDataTable
        Get
            Return Me.tableПодвал
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ПодвПомещение As ПодвПомещениеDataTable
        Get
            Return Me.tableПодвПомещение
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Чердак As ЧердакDataTable
        Get
            Return Me.tableЧердак
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Подъезд As ПодъездDataTable
        Get
            Return Me.tableПодъезд
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Этаж As ЭтажDataTable
        Get
            Return Me.tableЭтаж
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Квартира As КвартираDataTable
        Get
            Return Me.tableКвартира
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Комната As КомнатаDataTable
        Get
            Return Me.tableКомната
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Крыша As КрышаDataTable
        Get
            Return Me.tableКрыша
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As XMLSchema1 = CType(MyBase.Clone,XMLSchema1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Дом")) Is Nothing) Then
            Me.Tables.Add(New ДомDataTable(ds.Tables("Дом")))
        End If
        If (Not (ds.Tables("Подвал")) Is Nothing) Then
            Me.Tables.Add(New ПодвалDataTable(ds.Tables("Подвал")))
        End If
        If (Not (ds.Tables("ПодвПомещение")) Is Nothing) Then
            Me.Tables.Add(New ПодвПомещениеDataTable(ds.Tables("ПодвПомещение")))
        End If
        If (Not (ds.Tables("Чердак")) Is Nothing) Then
            Me.Tables.Add(New ЧердакDataTable(ds.Tables("Чердак")))
        End If
        If (Not (ds.Tables("Подъезд")) Is Nothing) Then
            Me.Tables.Add(New ПодъездDataTable(ds.Tables("Подъезд")))
        End If
        If (Not (ds.Tables("Этаж")) Is Nothing) Then
            Me.Tables.Add(New ЭтажDataTable(ds.Tables("Этаж")))
        End If
        If (Not (ds.Tables("Квартира")) Is Nothing) Then
            Me.Tables.Add(New КвартираDataTable(ds.Tables("Квартира")))
        End If
        If (Not (ds.Tables("Комната")) Is Nothing) Then
            Me.Tables.Add(New КомнатаDataTable(ds.Tables("Комната")))
        End If
        If (Not (ds.Tables("Крыша")) Is Nothing) Then
            Me.Tables.Add(New КрышаDataTable(ds.Tables("Крыша")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableДом = CType(Me.Tables("Дом"),ДомDataTable)
        If (Not (Me.tableДом) Is Nothing) Then
            Me.tableДом.InitVars
        End If
        Me.tableПодвал = CType(Me.Tables("Подвал"),ПодвалDataTable)
        If (Not (Me.tableПодвал) Is Nothing) Then
            Me.tableПодвал.InitVars
        End If
        Me.tableПодвПомещение = CType(Me.Tables("ПодвПомещение"),ПодвПомещениеDataTable)
        If (Not (Me.tableПодвПомещение) Is Nothing) Then
            Me.tableПодвПомещение.InitVars
        End If
        Me.tableЧердак = CType(Me.Tables("Чердак"),ЧердакDataTable)
        If (Not (Me.tableЧердак) Is Nothing) Then
            Me.tableЧердак.InitVars
        End If
        Me.tableПодъезд = CType(Me.Tables("Подъезд"),ПодъездDataTable)
        If (Not (Me.tableПодъезд) Is Nothing) Then
            Me.tableПодъезд.InitVars
        End If
        Me.tableЭтаж = CType(Me.Tables("Этаж"),ЭтажDataTable)
        If (Not (Me.tableЭтаж) Is Nothing) Then
            Me.tableЭтаж.InitVars
        End If
        Me.tableКвартира = CType(Me.Tables("Квартира"),КвартираDataTable)
        If (Not (Me.tableКвартира) Is Nothing) Then
            Me.tableКвартира.InitVars
        End If
        Me.tableКомната = CType(Me.Tables("Комната"),КомнатаDataTable)
        If (Not (Me.tableКомната) Is Nothing) Then
            Me.tableКомната.InitVars
        End If
        Me.tableКрыша = CType(Me.Tables("Крыша"),КрышаDataTable)
        If (Not (Me.tableКрыша) Is Nothing) Then
            Me.tableКрыша.InitVars
        End If
        Me.relationПодвал_ПодвПомещение = Me.Relations("Подвал_ПодвПомещение")
        Me.relationКвартира_Комната = Me.Relations("Квартира_Комната")
        Me.relationЭтаж_Квартира = Me.Relations("Этаж_Квартира")
        Me.relationПодъезд_Этаж = Me.Relations("Подъезд_Этаж")
        Me.relationДом_Подвал = Me.Relations("Дом_Подвал")
        Me.relationДом_Чердак = Me.Relations("Дом_Чердак")
        Me.relationДом_Подъезд = Me.Relations("Дом_Подъезд")
        Me.relationДом_Крыша = Me.Relations("Дом_Крыша")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "XMLSchema1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/XMLSchema1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("ru-RU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableДом = New ДомDataTable
        Me.Tables.Add(Me.tableДом)
        Me.tableПодвал = New ПодвалDataTable
        Me.Tables.Add(Me.tableПодвал)
        Me.tableПодвПомещение = New ПодвПомещениеDataTable
        Me.Tables.Add(Me.tableПодвПомещение)
        Me.tableЧердак = New ЧердакDataTable
        Me.Tables.Add(Me.tableЧердак)
        Me.tableПодъезд = New ПодъездDataTable
        Me.Tables.Add(Me.tableПодъезд)
        Me.tableЭтаж = New ЭтажDataTable
        Me.Tables.Add(Me.tableЭтаж)
        Me.tableКвартира = New КвартираDataTable
        Me.Tables.Add(Me.tableКвартира)
        Me.tableКомната = New КомнатаDataTable
        Me.Tables.Add(Me.tableКомната)
        Me.tableКрыша = New КрышаDataTable
        Me.Tables.Add(Me.tableКрыша)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Дом_Подвал", New DataColumn() {Me.tableДом.Дом_IdColumn}, New DataColumn() {Me.tableПодвал.Дом_IdColumn})
        Me.tableПодвал.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Подвал_ПодвПомещение", New DataColumn() {Me.tableПодвал.Подвал_IdColumn}, New DataColumn() {Me.tableПодвПомещение.Подвал_IdColumn})
        Me.tableПодвПомещение.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Дом_Чердак", New DataColumn() {Me.tableДом.Дом_IdColumn}, New DataColumn() {Me.tableЧердак.Дом_IdColumn})
        Me.tableЧердак.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Дом_Подъезд", New DataColumn() {Me.tableДом.Дом_IdColumn}, New DataColumn() {Me.tableПодъезд.Дом_IdColumn})
        Me.tableПодъезд.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Подъезд_Этаж", New DataColumn() {Me.tableПодъезд.Подъезд_IdColumn}, New DataColumn() {Me.tableЭтаж.Подъезд_IdColumn})
        Me.tableЭтаж.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Этаж_Квартира", New DataColumn() {Me.tableЭтаж.Этаж_IdColumn}, New DataColumn() {Me.tableКвартира.Этаж_IdColumn})
        Me.tableКвартира.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Квартира_Комната", New DataColumn() {Me.tableКвартира.Квартира_IdColumn}, New DataColumn() {Me.tableКомната.Квартира_IdColumn})
        Me.tableКомната.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Дом_Крыша", New DataColumn() {Me.tableДом.Дом_IdColumn}, New DataColumn() {Me.tableКрыша.Дом_IdColumn})
        Me.tableКрыша.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationПодвал_ПодвПомещение = New DataRelation("Подвал_ПодвПомещение", New DataColumn() {Me.tableПодвал.Подвал_IdColumn}, New DataColumn() {Me.tableПодвПомещение.Подвал_IdColumn}, false)
        Me.relationПодвал_ПодвПомещение.Nested = true
        Me.Relations.Add(Me.relationПодвал_ПодвПомещение)
        Me.relationКвартира_Комната = New DataRelation("Квартира_Комната", New DataColumn() {Me.tableКвартира.Квартира_IdColumn}, New DataColumn() {Me.tableКомната.Квартира_IdColumn}, false)
        Me.relationКвартира_Комната.Nested = true
        Me.Relations.Add(Me.relationКвартира_Комната)
        Me.relationЭтаж_Квартира = New DataRelation("Этаж_Квартира", New DataColumn() {Me.tableЭтаж.Этаж_IdColumn}, New DataColumn() {Me.tableКвартира.Этаж_IdColumn}, false)
        Me.relationЭтаж_Квартира.Nested = true
        Me.Relations.Add(Me.relationЭтаж_Квартира)
        Me.relationПодъезд_Этаж = New DataRelation("Подъезд_Этаж", New DataColumn() {Me.tableПодъезд.Подъезд_IdColumn}, New DataColumn() {Me.tableЭтаж.Подъезд_IdColumn}, false)
        Me.relationПодъезд_Этаж.Nested = true
        Me.Relations.Add(Me.relationПодъезд_Этаж)
        Me.relationДом_Подвал = New DataRelation("Дом_Подвал", New DataColumn() {Me.tableДом.Дом_IdColumn}, New DataColumn() {Me.tableПодвал.Дом_IdColumn}, false)
        Me.relationДом_Подвал.Nested = true
        Me.Relations.Add(Me.relationДом_Подвал)
        Me.relationДом_Чердак = New DataRelation("Дом_Чердак", New DataColumn() {Me.tableДом.Дом_IdColumn}, New DataColumn() {Me.tableЧердак.Дом_IdColumn}, false)
        Me.relationДом_Чердак.Nested = true
        Me.Relations.Add(Me.relationДом_Чердак)
        Me.relationДом_Подъезд = New DataRelation("Дом_Подъезд", New DataColumn() {Me.tableДом.Дом_IdColumn}, New DataColumn() {Me.tableПодъезд.Дом_IdColumn}, false)
        Me.relationДом_Подъезд.Nested = true
        Me.Relations.Add(Me.relationДом_Подъезд)
        Me.relationДом_Крыша = New DataRelation("Дом_Крыша", New DataColumn() {Me.tableДом.Дом_IdColumn}, New DataColumn() {Me.tableКрыша.Дом_IdColumn}, false)
        Me.relationДом_Крыша.Nested = true
        Me.Relations.Add(Me.relationДом_Крыша)
    End Sub
    
    Private Function ShouldSerializeДом() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeПодвал() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeПодвПомещение() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeЧердак() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeПодъезд() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeЭтаж() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeКвартира() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeКомната() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeКрыша() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ДомRowChangeEventHandler(ByVal sender As Object, ByVal e As ДомRowChangeEvent)
    
    Public Delegate Sub ПодвалRowChangeEventHandler(ByVal sender As Object, ByVal e As ПодвалRowChangeEvent)
    
    Public Delegate Sub ПодвПомещениеRowChangeEventHandler(ByVal sender As Object, ByVal e As ПодвПомещениеRowChangeEvent)
    
    Public Delegate Sub ЧердакRowChangeEventHandler(ByVal sender As Object, ByVal e As ЧердакRowChangeEvent)
    
    Public Delegate Sub ПодъездRowChangeEventHandler(ByVal sender As Object, ByVal e As ПодъездRowChangeEvent)
    
    Public Delegate Sub ЭтажRowChangeEventHandler(ByVal sender As Object, ByVal e As ЭтажRowChangeEvent)
    
    Public Delegate Sub КвартираRowChangeEventHandler(ByVal sender As Object, ByVal e As КвартираRowChangeEvent)
    
    Public Delegate Sub КомнатаRowChangeEventHandler(ByVal sender As Object, ByVal e As КомнатаRowChangeEvent)
    
    Public Delegate Sub КрышаRowChangeEventHandler(ByVal sender As Object, ByVal e As КрышаRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ДомDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnРайон As DataColumn
        
        Private columnУлица As DataColumn
        
        Private columnНомерДома As DataColumn
        
        Private columnДом_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Дом")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property РайонColumn As DataColumn
            Get
                Return Me.columnРайон
            End Get
        End Property
        
        Friend ReadOnly Property УлицаColumn As DataColumn
            Get
                Return Me.columnУлица
            End Get
        End Property
        
        Friend ReadOnly Property НомерДомаColumn As DataColumn
            Get
                Return Me.columnНомерДома
            End Get
        End Property
        
        Friend ReadOnly Property Дом_IdColumn As DataColumn
            Get
                Return Me.columnДом_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ДомRow
            Get
                Return CType(Me.Rows(index),ДомRow)
            End Get
        End Property
        
        Public Event ДомRowChanged As ДомRowChangeEventHandler
        
        Public Event ДомRowChanging As ДомRowChangeEventHandler
        
        Public Event ДомRowDeleted As ДомRowChangeEventHandler
        
        Public Event ДомRowDeleting As ДомRowChangeEventHandler
        
        Public Overloads Sub AddДомRow(ByVal row As ДомRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddДомRow(ByVal Район As String, ByVal Улица As String, ByVal НомерДома As Long) As ДомRow
            Dim rowДомRow As ДомRow = CType(Me.NewRow,ДомRow)
            rowДомRow.ItemArray = New Object() {Район, Улица, НомерДома, Nothing}
            Me.Rows.Add(rowДомRow)
            Return rowДомRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ДомDataTable = CType(MyBase.Clone,ДомDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ДомDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnРайон = Me.Columns("Район")
            Me.columnУлица = Me.Columns("Улица")
            Me.columnНомерДома = Me.Columns("НомерДома")
            Me.columnДом_Id = Me.Columns("Дом_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnРайон = New DataColumn("Район", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnРайон)
            Me.columnУлица = New DataColumn("Улица", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnУлица)
            Me.columnНомерДома = New DataColumn("НомерДома", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnНомерДома)
            Me.columnДом_Id = New DataColumn("Дом_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnДом_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnДом_Id}, true))
            Me.columnРайон.Namespace = ""
            Me.columnРайон.MaxLength = 20
            Me.columnУлица.Namespace = ""
            Me.columnУлица.MaxLength = 20
            Me.columnНомерДома.Namespace = ""
            Me.columnДом_Id.AutoIncrement = true
            Me.columnДом_Id.AllowDBNull = false
            Me.columnДом_Id.Unique = true
        End Sub
        
        Public Function NewДомRow() As ДомRow
            Return CType(Me.NewRow,ДомRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ДомRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ДомRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ДомRowChangedEvent) Is Nothing) Then
                RaiseEvent ДомRowChanged(Me, New ДомRowChangeEvent(CType(e.Row,ДомRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ДомRowChangingEvent) Is Nothing) Then
                RaiseEvent ДомRowChanging(Me, New ДомRowChangeEvent(CType(e.Row,ДомRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ДомRowDeletedEvent) Is Nothing) Then
                RaiseEvent ДомRowDeleted(Me, New ДомRowChangeEvent(CType(e.Row,ДомRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ДомRowDeletingEvent) Is Nothing) Then
                RaiseEvent ДомRowDeleting(Me, New ДомRowChangeEvent(CType(e.Row,ДомRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveДомRow(ByVal row As ДомRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ДомRow
        Inherits DataRow
        
        Private tableДом As ДомDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableДом = CType(Me.Table,ДомDataTable)
        End Sub
        
        Public Property Район As String
            Get
                Try 
                    Return CType(Me(Me.tableДом.РайонColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableДом.РайонColumn) = value
            End Set
        End Property
        
        Public Property Улица As String
            Get
                Try 
                    Return CType(Me(Me.tableДом.УлицаColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableДом.УлицаColumn) = value
            End Set
        End Property
        
        Public Property НомерДома As Long
            Get
                Try 
                    Return CType(Me(Me.tableДом.НомерДомаColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableДом.НомерДомаColumn) = value
            End Set
        End Property
        
        Public Function IsРайонNull() As Boolean
            Return Me.IsNull(Me.tableДом.РайонColumn)
        End Function
        
        Public Sub SetРайонNull()
            Me(Me.tableДом.РайонColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsУлицаNull() As Boolean
            Return Me.IsNull(Me.tableДом.УлицаColumn)
        End Function
        
        Public Sub SetУлицаNull()
            Me(Me.tableДом.УлицаColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsНомерДомаNull() As Boolean
            Return Me.IsNull(Me.tableДом.НомерДомаColumn)
        End Function
        
        Public Sub SetНомерДомаNull()
            Me(Me.tableДом.НомерДомаColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetПодвалRows() As ПодвалRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Дом_Подвал")),ПодвалRow())
        End Function
        
        Public Function GetЧердакRows() As ЧердакRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Дом_Чердак")),ЧердакRow())
        End Function
        
        Public Function GetПодъездRows() As ПодъездRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Дом_Подъезд")),ПодъездRow())
        End Function
        
        Public Function GetКрышаRows() As КрышаRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Дом_Крыша")),КрышаRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ДомRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ДомRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ДомRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ДомRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодвалDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnДлинаХолТруб As DataColumn
        
        Private columnДлинаГорТруб As DataColumn
        
        Private columnДиаметрХолТруб As DataColumn
        
        Private columnДиаметрГорТруб As DataColumn
        
        Private columnПодвал_Id As DataColumn
        
        Private columnДом_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Подвал")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ДлинаХолТрубColumn As DataColumn
            Get
                Return Me.columnДлинаХолТруб
            End Get
        End Property
        
        Friend ReadOnly Property ДлинаГорТрубColumn As DataColumn
            Get
                Return Me.columnДлинаГорТруб
            End Get
        End Property
        
        Friend ReadOnly Property ДиаметрХолТрубColumn As DataColumn
            Get
                Return Me.columnДиаметрХолТруб
            End Get
        End Property
        
        Friend ReadOnly Property ДиаметрГорТрубColumn As DataColumn
            Get
                Return Me.columnДиаметрГорТруб
            End Get
        End Property
        
        Friend ReadOnly Property Подвал_IdColumn As DataColumn
            Get
                Return Me.columnПодвал_Id
            End Get
        End Property
        
        Friend ReadOnly Property Дом_IdColumn As DataColumn
            Get
                Return Me.columnДом_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ПодвалRow
            Get
                Return CType(Me.Rows(index),ПодвалRow)
            End Get
        End Property
        
        Public Event ПодвалRowChanged As ПодвалRowChangeEventHandler
        
        Public Event ПодвалRowChanging As ПодвалRowChangeEventHandler
        
        Public Event ПодвалRowDeleted As ПодвалRowChangeEventHandler
        
        Public Event ПодвалRowDeleting As ПодвалRowChangeEventHandler
        
        Public Overloads Sub AddПодвалRow(ByVal row As ПодвалRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddПодвалRow(ByVal ДлинаХолТруб As Single, ByVal ДлинаГорТруб As Single, ByVal ДиаметрХолТруб As Single, ByVal ДиаметрГорТруб As Single, ByVal parentДомRowByДом_Подвал As ДомRow) As ПодвалRow
            Dim rowПодвалRow As ПодвалRow = CType(Me.NewRow,ПодвалRow)
            rowПодвалRow.ItemArray = New Object() {ДлинаХолТруб, ДлинаГорТруб, ДиаметрХолТруб, ДиаметрГорТруб, Nothing, parentДомRowByДом_Подвал(3)}
            Me.Rows.Add(rowПодвалRow)
            Return rowПодвалRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ПодвалDataTable = CType(MyBase.Clone,ПодвалDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ПодвалDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnДлинаХолТруб = Me.Columns("ДлинаХолТруб")
            Me.columnДлинаГорТруб = Me.Columns("ДлинаГорТруб")
            Me.columnДиаметрХолТруб = Me.Columns("ДиаметрХолТруб")
            Me.columnДиаметрГорТруб = Me.Columns("ДиаметрГорТруб")
            Me.columnПодвал_Id = Me.Columns("Подвал_Id")
            Me.columnДом_Id = Me.Columns("Дом_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnДлинаХолТруб = New DataColumn("ДлинаХолТруб", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnДлинаХолТруб)
            Me.columnДлинаГорТруб = New DataColumn("ДлинаГорТруб", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnДлинаГорТруб)
            Me.columnДиаметрХолТруб = New DataColumn("ДиаметрХолТруб", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnДиаметрХолТруб)
            Me.columnДиаметрГорТруб = New DataColumn("ДиаметрГорТруб", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnДиаметрГорТруб)
            Me.columnПодвал_Id = New DataColumn("Подвал_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnПодвал_Id)
            Me.columnДом_Id = New DataColumn("Дом_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnДом_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnПодвал_Id}, true))
            Me.columnДлинаХолТруб.Namespace = ""
            Me.columnДлинаГорТруб.Namespace = ""
            Me.columnДиаметрХолТруб.Namespace = ""
            Me.columnДиаметрГорТруб.Namespace = ""
            Me.columnПодвал_Id.AutoIncrement = true
            Me.columnПодвал_Id.AllowDBNull = false
            Me.columnПодвал_Id.Unique = true
        End Sub
        
        Public Function NewПодвалRow() As ПодвалRow
            Return CType(Me.NewRow,ПодвалRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ПодвалRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ПодвалRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ПодвалRowChangedEvent) Is Nothing) Then
                RaiseEvent ПодвалRowChanged(Me, New ПодвалRowChangeEvent(CType(e.Row,ПодвалRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ПодвалRowChangingEvent) Is Nothing) Then
                RaiseEvent ПодвалRowChanging(Me, New ПодвалRowChangeEvent(CType(e.Row,ПодвалRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ПодвалRowDeletedEvent) Is Nothing) Then
                RaiseEvent ПодвалRowDeleted(Me, New ПодвалRowChangeEvent(CType(e.Row,ПодвалRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ПодвалRowDeletingEvent) Is Nothing) Then
                RaiseEvent ПодвалRowDeleting(Me, New ПодвалRowChangeEvent(CType(e.Row,ПодвалRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveПодвалRow(ByVal row As ПодвалRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодвалRow
        Inherits DataRow
        
        Private tableПодвал As ПодвалDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableПодвал = CType(Me.Table,ПодвалDataTable)
        End Sub
        
        Public Property ДлинаХолТруб As Single
            Get
                Try 
                    Return CType(Me(Me.tableПодвал.ДлинаХолТрубColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодвал.ДлинаХолТрубColumn) = value
            End Set
        End Property
        
        Public Property ДлинаГорТруб As Single
            Get
                Try 
                    Return CType(Me(Me.tableПодвал.ДлинаГорТрубColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодвал.ДлинаГорТрубColumn) = value
            End Set
        End Property
        
        Public Property ДиаметрХолТруб As Single
            Get
                Try 
                    Return CType(Me(Me.tableПодвал.ДиаметрХолТрубColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодвал.ДиаметрХолТрубColumn) = value
            End Set
        End Property
        
        Public Property ДиаметрГорТруб As Single
            Get
                Try 
                    Return CType(Me(Me.tableПодвал.ДиаметрГорТрубColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодвал.ДиаметрГорТрубColumn) = value
            End Set
        End Property
        
        Public Property ДомRow As ДомRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Дом_Подвал")),ДомRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Дом_Подвал"))
            End Set
        End Property
        
        Public Function IsДлинаХолТрубNull() As Boolean
            Return Me.IsNull(Me.tableПодвал.ДлинаХолТрубColumn)
        End Function
        
        Public Sub SetДлинаХолТрубNull()
            Me(Me.tableПодвал.ДлинаХолТрубColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsДлинаГорТрубNull() As Boolean
            Return Me.IsNull(Me.tableПодвал.ДлинаГорТрубColumn)
        End Function
        
        Public Sub SetДлинаГорТрубNull()
            Me(Me.tableПодвал.ДлинаГорТрубColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsДиаметрХолТрубNull() As Boolean
            Return Me.IsNull(Me.tableПодвал.ДиаметрХолТрубColumn)
        End Function
        
        Public Sub SetДиаметрХолТрубNull()
            Me(Me.tableПодвал.ДиаметрХолТрубColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsДиаметрГорТрубNull() As Boolean
            Return Me.IsNull(Me.tableПодвал.ДиаметрГорТрубColumn)
        End Function
        
        Public Sub SetДиаметрГорТрубNull()
            Me(Me.tableПодвал.ДиаметрГорТрубColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetПодвПомещениеRows() As ПодвПомещениеRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Подвал_ПодвПомещение")),ПодвПомещениеRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодвалRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ПодвалRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ПодвалRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ПодвалRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодвПомещениеDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnНомерПомещения As DataColumn
        
        Private columnПлощПодвПомещения As DataColumn
        
        Private columnВысотаПотолков As DataColumn
        
        Private columnКоличОтопитПриборов As DataColumn
        
        Private columnПодвал_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ПодвПомещение")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property НомерПомещенияColumn As DataColumn
            Get
                Return Me.columnНомерПомещения
            End Get
        End Property
        
        Friend ReadOnly Property ПлощПодвПомещенияColumn As DataColumn
            Get
                Return Me.columnПлощПодвПомещения
            End Get
        End Property
        
        Friend ReadOnly Property ВысотаПотолковColumn As DataColumn
            Get
                Return Me.columnВысотаПотолков
            End Get
        End Property
        
        Friend ReadOnly Property КоличОтопитПриборовColumn As DataColumn
            Get
                Return Me.columnКоличОтопитПриборов
            End Get
        End Property
        
        Friend ReadOnly Property Подвал_IdColumn As DataColumn
            Get
                Return Me.columnПодвал_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ПодвПомещениеRow
            Get
                Return CType(Me.Rows(index),ПодвПомещениеRow)
            End Get
        End Property
        
        Public Event ПодвПомещениеRowChanged As ПодвПомещениеRowChangeEventHandler
        
        Public Event ПодвПомещениеRowChanging As ПодвПомещениеRowChangeEventHandler
        
        Public Event ПодвПомещениеRowDeleted As ПодвПомещениеRowChangeEventHandler
        
        Public Event ПодвПомещениеRowDeleting As ПодвПомещениеRowChangeEventHandler
        
        Public Overloads Sub AddПодвПомещениеRow(ByVal row As ПодвПомещениеRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddПодвПомещениеRow(ByVal НомерПомещения As Long, ByVal ПлощПодвПомещения As Single, ByVal ВысотаПотолков As Single, ByVal КоличОтопитПриборов As Long, ByVal parentПодвалRowByПодвал_ПодвПомещение As ПодвалRow) As ПодвПомещениеRow
            Dim rowПодвПомещениеRow As ПодвПомещениеRow = CType(Me.NewRow,ПодвПомещениеRow)
            rowПодвПомещениеRow.ItemArray = New Object() {НомерПомещения, ПлощПодвПомещения, ВысотаПотолков, КоличОтопитПриборов, parentПодвалRowByПодвал_ПодвПомещение(4)}
            Me.Rows.Add(rowПодвПомещениеRow)
            Return rowПодвПомещениеRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ПодвПомещениеDataTable = CType(MyBase.Clone,ПодвПомещениеDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ПодвПомещениеDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnНомерПомещения = Me.Columns("НомерПомещения")
            Me.columnПлощПодвПомещения = Me.Columns("ПлощПодвПомещения")
            Me.columnВысотаПотолков = Me.Columns("ВысотаПотолков")
            Me.columnКоличОтопитПриборов = Me.Columns("КоличОтопитПриборов")
            Me.columnПодвал_Id = Me.Columns("Подвал_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnНомерПомещения = New DataColumn("НомерПомещения", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnНомерПомещения)
            Me.columnПлощПодвПомещения = New DataColumn("ПлощПодвПомещения", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnПлощПодвПомещения)
            Me.columnВысотаПотолков = New DataColumn("ВысотаПотолков", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnВысотаПотолков)
            Me.columnКоличОтопитПриборов = New DataColumn("КоличОтопитПриборов", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnКоличОтопитПриборов)
            Me.columnПодвал_Id = New DataColumn("Подвал_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnПодвал_Id)
            Me.columnНомерПомещения.Namespace = ""
            Me.columnПлощПодвПомещения.Namespace = ""
            Me.columnВысотаПотолков.Namespace = ""
            Me.columnКоличОтопитПриборов.Namespace = ""
        End Sub
        
        Public Function NewПодвПомещениеRow() As ПодвПомещениеRow
            Return CType(Me.NewRow,ПодвПомещениеRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ПодвПомещениеRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ПодвПомещениеRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ПодвПомещениеRowChangedEvent) Is Nothing) Then
                RaiseEvent ПодвПомещениеRowChanged(Me, New ПодвПомещениеRowChangeEvent(CType(e.Row,ПодвПомещениеRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ПодвПомещениеRowChangingEvent) Is Nothing) Then
                RaiseEvent ПодвПомещениеRowChanging(Me, New ПодвПомещениеRowChangeEvent(CType(e.Row,ПодвПомещениеRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ПодвПомещениеRowDeletedEvent) Is Nothing) Then
                RaiseEvent ПодвПомещениеRowDeleted(Me, New ПодвПомещениеRowChangeEvent(CType(e.Row,ПодвПомещениеRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ПодвПомещениеRowDeletingEvent) Is Nothing) Then
                RaiseEvent ПодвПомещениеRowDeleting(Me, New ПодвПомещениеRowChangeEvent(CType(e.Row,ПодвПомещениеRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveПодвПомещениеRow(ByVal row As ПодвПомещениеRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодвПомещениеRow
        Inherits DataRow
        
        Private tableПодвПомещение As ПодвПомещениеDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableПодвПомещение = CType(Me.Table,ПодвПомещениеDataTable)
        End Sub
        
        Public Property НомерПомещения As Long
            Get
                Try 
                    Return CType(Me(Me.tableПодвПомещение.НомерПомещенияColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодвПомещение.НомерПомещенияColumn) = value
            End Set
        End Property
        
        Public Property ПлощПодвПомещения As Single
            Get
                Try 
                    Return CType(Me(Me.tableПодвПомещение.ПлощПодвПомещенияColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодвПомещение.ПлощПодвПомещенияColumn) = value
            End Set
        End Property
        
        Public Property ВысотаПотолков As Single
            Get
                Try 
                    Return CType(Me(Me.tableПодвПомещение.ВысотаПотолковColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодвПомещение.ВысотаПотолковColumn) = value
            End Set
        End Property
        
        Public Property КоличОтопитПриборов As Long
            Get
                Try 
                    Return CType(Me(Me.tableПодвПомещение.КоличОтопитПриборовColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодвПомещение.КоличОтопитПриборовColumn) = value
            End Set
        End Property
        
        Public Property ПодвалRow As ПодвалRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Подвал_ПодвПомещение")),ПодвалRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Подвал_ПодвПомещение"))
            End Set
        End Property
        
        Public Function IsНомерПомещенияNull() As Boolean
            Return Me.IsNull(Me.tableПодвПомещение.НомерПомещенияColumn)
        End Function
        
        Public Sub SetНомерПомещенияNull()
            Me(Me.tableПодвПомещение.НомерПомещенияColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsПлощПодвПомещенияNull() As Boolean
            Return Me.IsNull(Me.tableПодвПомещение.ПлощПодвПомещенияColumn)
        End Function
        
        Public Sub SetПлощПодвПомещенияNull()
            Me(Me.tableПодвПомещение.ПлощПодвПомещенияColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsВысотаПотолковNull() As Boolean
            Return Me.IsNull(Me.tableПодвПомещение.ВысотаПотолковColumn)
        End Function
        
        Public Sub SetВысотаПотолковNull()
            Me(Me.tableПодвПомещение.ВысотаПотолковColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsКоличОтопитПриборовNull() As Boolean
            Return Me.IsNull(Me.tableПодвПомещение.КоличОтопитПриборовColumn)
        End Function
        
        Public Sub SetКоличОтопитПриборовNull()
            Me(Me.tableПодвПомещение.КоличОтопитПриборовColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодвПомещениеRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ПодвПомещениеRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ПодвПомещениеRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ПодвПомещениеRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ЧердакDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnКоличВходов As DataColumn
        
        Private columnПлощЧерд As DataColumn
        
        Private columnДом_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Чердак")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property КоличВходовColumn As DataColumn
            Get
                Return Me.columnКоличВходов
            End Get
        End Property
        
        Friend ReadOnly Property ПлощЧердColumn As DataColumn
            Get
                Return Me.columnПлощЧерд
            End Get
        End Property
        
        Friend ReadOnly Property Дом_IdColumn As DataColumn
            Get
                Return Me.columnДом_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ЧердакRow
            Get
                Return CType(Me.Rows(index),ЧердакRow)
            End Get
        End Property
        
        Public Event ЧердакRowChanged As ЧердакRowChangeEventHandler
        
        Public Event ЧердакRowChanging As ЧердакRowChangeEventHandler
        
        Public Event ЧердакRowDeleted As ЧердакRowChangeEventHandler
        
        Public Event ЧердакRowDeleting As ЧердакRowChangeEventHandler
        
        Public Overloads Sub AddЧердакRow(ByVal row As ЧердакRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddЧердакRow(ByVal КоличВходов As Long, ByVal ПлощЧерд As Single, ByVal parentДомRowByДом_Чердак As ДомRow) As ЧердакRow
            Dim rowЧердакRow As ЧердакRow = CType(Me.NewRow,ЧердакRow)
            rowЧердакRow.ItemArray = New Object() {КоличВходов, ПлощЧерд, parentДомRowByДом_Чердак(3)}
            Me.Rows.Add(rowЧердакRow)
            Return rowЧердакRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ЧердакDataTable = CType(MyBase.Clone,ЧердакDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ЧердакDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnКоличВходов = Me.Columns("КоличВходов")
            Me.columnПлощЧерд = Me.Columns("ПлощЧерд")
            Me.columnДом_Id = Me.Columns("Дом_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnКоличВходов = New DataColumn("КоличВходов", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnКоличВходов)
            Me.columnПлощЧерд = New DataColumn("ПлощЧерд", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnПлощЧерд)
            Me.columnДом_Id = New DataColumn("Дом_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnДом_Id)
            Me.columnКоличВходов.Namespace = ""
            Me.columnПлощЧерд.Namespace = ""
        End Sub
        
        Public Function NewЧердакRow() As ЧердакRow
            Return CType(Me.NewRow,ЧердакRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ЧердакRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ЧердакRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ЧердакRowChangedEvent) Is Nothing) Then
                RaiseEvent ЧердакRowChanged(Me, New ЧердакRowChangeEvent(CType(e.Row,ЧердакRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ЧердакRowChangingEvent) Is Nothing) Then
                RaiseEvent ЧердакRowChanging(Me, New ЧердакRowChangeEvent(CType(e.Row,ЧердакRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ЧердакRowDeletedEvent) Is Nothing) Then
                RaiseEvent ЧердакRowDeleted(Me, New ЧердакRowChangeEvent(CType(e.Row,ЧердакRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ЧердакRowDeletingEvent) Is Nothing) Then
                RaiseEvent ЧердакRowDeleting(Me, New ЧердакRowChangeEvent(CType(e.Row,ЧердакRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveЧердакRow(ByVal row As ЧердакRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ЧердакRow
        Inherits DataRow
        
        Private tableЧердак As ЧердакDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableЧердак = CType(Me.Table,ЧердакDataTable)
        End Sub
        
        Public Property КоличВходов As Long
            Get
                Try 
                    Return CType(Me(Me.tableЧердак.КоличВходовColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableЧердак.КоличВходовColumn) = value
            End Set
        End Property
        
        Public Property ПлощЧерд As Single
            Get
                Try 
                    Return CType(Me(Me.tableЧердак.ПлощЧердColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableЧердак.ПлощЧердColumn) = value
            End Set
        End Property
        
        Public Property ДомRow As ДомRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Дом_Чердак")),ДомRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Дом_Чердак"))
            End Set
        End Property
        
        Public Function IsКоличВходовNull() As Boolean
            Return Me.IsNull(Me.tableЧердак.КоличВходовColumn)
        End Function
        
        Public Sub SetКоличВходовNull()
            Me(Me.tableЧердак.КоличВходовColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsПлощЧердNull() As Boolean
            Return Me.IsNull(Me.tableЧердак.ПлощЧердColumn)
        End Function
        
        Public Sub SetПлощЧердNull()
            Me(Me.tableЧердак.ПлощЧердColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ЧердакRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ЧердакRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ЧердакRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ЧердакRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодъездDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnНомерПодъезда As DataColumn
        
        Private columnНаличДомофона As DataColumn
        
        Private columnКоличОсветПриборов As DataColumn
        
        Private columnКоличествоОкон As DataColumn
        
        Private columnПодъезд_Id As DataColumn
        
        Private columnДом_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Подъезд")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property НомерПодъездаColumn As DataColumn
            Get
                Return Me.columnНомерПодъезда
            End Get
        End Property
        
        Friend ReadOnly Property НаличДомофонаColumn As DataColumn
            Get
                Return Me.columnНаличДомофона
            End Get
        End Property
        
        Friend ReadOnly Property КоличОсветПриборовColumn As DataColumn
            Get
                Return Me.columnКоличОсветПриборов
            End Get
        End Property
        
        Friend ReadOnly Property КоличествоОконColumn As DataColumn
            Get
                Return Me.columnКоличествоОкон
            End Get
        End Property
        
        Friend ReadOnly Property Подъезд_IdColumn As DataColumn
            Get
                Return Me.columnПодъезд_Id
            End Get
        End Property
        
        Friend ReadOnly Property Дом_IdColumn As DataColumn
            Get
                Return Me.columnДом_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ПодъездRow
            Get
                Return CType(Me.Rows(index),ПодъездRow)
            End Get
        End Property
        
        Public Event ПодъездRowChanged As ПодъездRowChangeEventHandler
        
        Public Event ПодъездRowChanging As ПодъездRowChangeEventHandler
        
        Public Event ПодъездRowDeleted As ПодъездRowChangeEventHandler
        
        Public Event ПодъездRowDeleting As ПодъездRowChangeEventHandler
        
        Public Overloads Sub AddПодъездRow(ByVal row As ПодъездRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddПодъездRow(ByVal НомерПодъезда As Long, ByVal НаличДомофона As Boolean, ByVal КоличОсветПриборов As Long, ByVal КоличествоОкон As Long, ByVal parentДомRowByДом_Подъезд As ДомRow) As ПодъездRow
            Dim rowПодъездRow As ПодъездRow = CType(Me.NewRow,ПодъездRow)
            rowПодъездRow.ItemArray = New Object() {НомерПодъезда, НаличДомофона, КоличОсветПриборов, КоличествоОкон, Nothing, parentДомRowByДом_Подъезд(3)}
            Me.Rows.Add(rowПодъездRow)
            Return rowПодъездRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ПодъездDataTable = CType(MyBase.Clone,ПодъездDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ПодъездDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnНомерПодъезда = Me.Columns("НомерПодъезда")
            Me.columnНаличДомофона = Me.Columns("НаличДомофона")
            Me.columnКоличОсветПриборов = Me.Columns("КоличОсветПриборов")
            Me.columnКоличествоОкон = Me.Columns("КоличествоОкон")
            Me.columnПодъезд_Id = Me.Columns("Подъезд_Id")
            Me.columnДом_Id = Me.Columns("Дом_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnНомерПодъезда = New DataColumn("НомерПодъезда", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnНомерПодъезда)
            Me.columnНаличДомофона = New DataColumn("НаличДомофона", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnНаличДомофона)
            Me.columnКоличОсветПриборов = New DataColumn("КоличОсветПриборов", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnКоличОсветПриборов)
            Me.columnКоличествоОкон = New DataColumn("КоличествоОкон", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnКоличествоОкон)
            Me.columnПодъезд_Id = New DataColumn("Подъезд_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnПодъезд_Id)
            Me.columnДом_Id = New DataColumn("Дом_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnДом_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnПодъезд_Id}, true))
            Me.columnНомерПодъезда.Namespace = ""
            Me.columnНаличДомофона.Namespace = ""
            Me.columnКоличОсветПриборов.Namespace = ""
            Me.columnКоличествоОкон.Namespace = ""
            Me.columnПодъезд_Id.AutoIncrement = true
            Me.columnПодъезд_Id.AllowDBNull = false
            Me.columnПодъезд_Id.Unique = true
        End Sub
        
        Public Function NewПодъездRow() As ПодъездRow
            Return CType(Me.NewRow,ПодъездRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ПодъездRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ПодъездRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ПодъездRowChangedEvent) Is Nothing) Then
                RaiseEvent ПодъездRowChanged(Me, New ПодъездRowChangeEvent(CType(e.Row,ПодъездRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ПодъездRowChangingEvent) Is Nothing) Then
                RaiseEvent ПодъездRowChanging(Me, New ПодъездRowChangeEvent(CType(e.Row,ПодъездRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ПодъездRowDeletedEvent) Is Nothing) Then
                RaiseEvent ПодъездRowDeleted(Me, New ПодъездRowChangeEvent(CType(e.Row,ПодъездRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ПодъездRowDeletingEvent) Is Nothing) Then
                RaiseEvent ПодъездRowDeleting(Me, New ПодъездRowChangeEvent(CType(e.Row,ПодъездRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveПодъездRow(ByVal row As ПодъездRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодъездRow
        Inherits DataRow
        
        Private tableПодъезд As ПодъездDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableПодъезд = CType(Me.Table,ПодъездDataTable)
        End Sub
        
        Public Property НомерПодъезда As Long
            Get
                Try 
                    Return CType(Me(Me.tableПодъезд.НомерПодъездаColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодъезд.НомерПодъездаColumn) = value
            End Set
        End Property
        
        Public Property НаличДомофона As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableПодъезд.НаличДомофонаColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодъезд.НаличДомофонаColumn) = value
            End Set
        End Property
        
        Public Property КоличОсветПриборов As Long
            Get
                Try 
                    Return CType(Me(Me.tableПодъезд.КоличОсветПриборовColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодъезд.КоличОсветПриборовColumn) = value
            End Set
        End Property
        
        Public Property КоличествоОкон As Long
            Get
                Try 
                    Return CType(Me(Me.tableПодъезд.КоличествоОконColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableПодъезд.КоличествоОконColumn) = value
            End Set
        End Property
        
        Public Property ДомRow As ДомRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Дом_Подъезд")),ДомRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Дом_Подъезд"))
            End Set
        End Property
        
        Public Function IsНомерПодъездаNull() As Boolean
            Return Me.IsNull(Me.tableПодъезд.НомерПодъездаColumn)
        End Function
        
        Public Sub SetНомерПодъездаNull()
            Me(Me.tableПодъезд.НомерПодъездаColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsНаличДомофонаNull() As Boolean
            Return Me.IsNull(Me.tableПодъезд.НаличДомофонаColumn)
        End Function
        
        Public Sub SetНаличДомофонаNull()
            Me(Me.tableПодъезд.НаличДомофонаColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsКоличОсветПриборовNull() As Boolean
            Return Me.IsNull(Me.tableПодъезд.КоличОсветПриборовColumn)
        End Function
        
        Public Sub SetКоличОсветПриборовNull()
            Me(Me.tableПодъезд.КоличОсветПриборовColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsКоличествоОконNull() As Boolean
            Return Me.IsNull(Me.tableПодъезд.КоличествоОконColumn)
        End Function
        
        Public Sub SetКоличествоОконNull()
            Me(Me.tableПодъезд.КоличествоОконColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetЭтажRows() As ЭтажRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Подъезд_Этаж")),ЭтажRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ПодъездRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ПодъездRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ПодъездRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ПодъездRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ЭтажDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnНомерЭтажа As DataColumn
        
        Private columnПлощадьЛестничнКлетки As DataColumn
        
        Private columnКоличЭлектрощитов As DataColumn
        
        Private columnЭтаж_Id As DataColumn
        
        Private columnПодъезд_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Этаж")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property НомерЭтажаColumn As DataColumn
            Get
                Return Me.columnНомерЭтажа
            End Get
        End Property
        
        Friend ReadOnly Property ПлощадьЛестничнКлеткиColumn As DataColumn
            Get
                Return Me.columnПлощадьЛестничнКлетки
            End Get
        End Property
        
        Friend ReadOnly Property КоличЭлектрощитовColumn As DataColumn
            Get
                Return Me.columnКоличЭлектрощитов
            End Get
        End Property
        
        Friend ReadOnly Property Этаж_IdColumn As DataColumn
            Get
                Return Me.columnЭтаж_Id
            End Get
        End Property
        
        Friend ReadOnly Property Подъезд_IdColumn As DataColumn
            Get
                Return Me.columnПодъезд_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ЭтажRow
            Get
                Return CType(Me.Rows(index),ЭтажRow)
            End Get
        End Property
        
        Public Event ЭтажRowChanged As ЭтажRowChangeEventHandler
        
        Public Event ЭтажRowChanging As ЭтажRowChangeEventHandler
        
        Public Event ЭтажRowDeleted As ЭтажRowChangeEventHandler
        
        Public Event ЭтажRowDeleting As ЭтажRowChangeEventHandler
        
        Public Overloads Sub AddЭтажRow(ByVal row As ЭтажRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddЭтажRow(ByVal НомерЭтажа As Long, ByVal ПлощадьЛестничнКлетки As Single, ByVal КоличЭлектрощитов As Long, ByVal parentПодъездRowByПодъезд_Этаж As ПодъездRow) As ЭтажRow
            Dim rowЭтажRow As ЭтажRow = CType(Me.NewRow,ЭтажRow)
            rowЭтажRow.ItemArray = New Object() {НомерЭтажа, ПлощадьЛестничнКлетки, КоличЭлектрощитов, Nothing, parentПодъездRowByПодъезд_Этаж(4)}
            Me.Rows.Add(rowЭтажRow)
            Return rowЭтажRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ЭтажDataTable = CType(MyBase.Clone,ЭтажDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ЭтажDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnНомерЭтажа = Me.Columns("НомерЭтажа")
            Me.columnПлощадьЛестничнКлетки = Me.Columns("ПлощадьЛестничнКлетки")
            Me.columnКоличЭлектрощитов = Me.Columns("КоличЭлектрощитов")
            Me.columnЭтаж_Id = Me.Columns("Этаж_Id")
            Me.columnПодъезд_Id = Me.Columns("Подъезд_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnНомерЭтажа = New DataColumn("НомерЭтажа", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnНомерЭтажа)
            Me.columnПлощадьЛестничнКлетки = New DataColumn("ПлощадьЛестничнКлетки", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnПлощадьЛестничнКлетки)
            Me.columnКоличЭлектрощитов = New DataColumn("КоличЭлектрощитов", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnКоличЭлектрощитов)
            Me.columnЭтаж_Id = New DataColumn("Этаж_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnЭтаж_Id)
            Me.columnПодъезд_Id = New DataColumn("Подъезд_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnПодъезд_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnЭтаж_Id}, true))
            Me.columnНомерЭтажа.Namespace = ""
            Me.columnПлощадьЛестничнКлетки.Namespace = ""
            Me.columnКоличЭлектрощитов.Namespace = ""
            Me.columnЭтаж_Id.AutoIncrement = true
            Me.columnЭтаж_Id.AllowDBNull = false
            Me.columnЭтаж_Id.Unique = true
        End Sub
        
        Public Function NewЭтажRow() As ЭтажRow
            Return CType(Me.NewRow,ЭтажRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ЭтажRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ЭтажRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ЭтажRowChangedEvent) Is Nothing) Then
                RaiseEvent ЭтажRowChanged(Me, New ЭтажRowChangeEvent(CType(e.Row,ЭтажRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ЭтажRowChangingEvent) Is Nothing) Then
                RaiseEvent ЭтажRowChanging(Me, New ЭтажRowChangeEvent(CType(e.Row,ЭтажRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ЭтажRowDeletedEvent) Is Nothing) Then
                RaiseEvent ЭтажRowDeleted(Me, New ЭтажRowChangeEvent(CType(e.Row,ЭтажRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ЭтажRowDeletingEvent) Is Nothing) Then
                RaiseEvent ЭтажRowDeleting(Me, New ЭтажRowChangeEvent(CType(e.Row,ЭтажRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveЭтажRow(ByVal row As ЭтажRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ЭтажRow
        Inherits DataRow
        
        Private tableЭтаж As ЭтажDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableЭтаж = CType(Me.Table,ЭтажDataTable)
        End Sub
        
        Public Property НомерЭтажа As Long
            Get
                Try 
                    Return CType(Me(Me.tableЭтаж.НомерЭтажаColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableЭтаж.НомерЭтажаColumn) = value
            End Set
        End Property
        
        Public Property ПлощадьЛестничнКлетки As Single
            Get
                Try 
                    Return CType(Me(Me.tableЭтаж.ПлощадьЛестничнКлеткиColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableЭтаж.ПлощадьЛестничнКлеткиColumn) = value
            End Set
        End Property
        
        Public Property КоличЭлектрощитов As Long
            Get
                Try 
                    Return CType(Me(Me.tableЭтаж.КоличЭлектрощитовColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableЭтаж.КоличЭлектрощитовColumn) = value
            End Set
        End Property
        
        Public Property ПодъездRow As ПодъездRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Подъезд_Этаж")),ПодъездRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Подъезд_Этаж"))
            End Set
        End Property
        
        Public Function IsНомерЭтажаNull() As Boolean
            Return Me.IsNull(Me.tableЭтаж.НомерЭтажаColumn)
        End Function
        
        Public Sub SetНомерЭтажаNull()
            Me(Me.tableЭтаж.НомерЭтажаColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsПлощадьЛестничнКлеткиNull() As Boolean
            Return Me.IsNull(Me.tableЭтаж.ПлощадьЛестничнКлеткиColumn)
        End Function
        
        Public Sub SetПлощадьЛестничнКлеткиNull()
            Me(Me.tableЭтаж.ПлощадьЛестничнКлеткиColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsКоличЭлектрощитовNull() As Boolean
            Return Me.IsNull(Me.tableЭтаж.КоличЭлектрощитовColumn)
        End Function
        
        Public Sub SetКоличЭлектрощитовNull()
            Me(Me.tableЭтаж.КоличЭлектрощитовColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetКвартираRows() As КвартираRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Этаж_Квартира")),КвартираRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ЭтажRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ЭтажRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ЭтажRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ЭтажRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КвартираDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnНомерКвартиры As DataColumn
        
        Private columnОбщаяПлощадь As DataColumn
        
        Private columnПлощЖилыхПомещ As DataColumn
        
        Private columnНаличиеКолонки As DataColumn
        
        Private columnКвартира_Id As DataColumn
        
        Private columnЭтаж_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Квартира")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property НомерКвартирыColumn As DataColumn
            Get
                Return Me.columnНомерКвартиры
            End Get
        End Property
        
        Friend ReadOnly Property ОбщаяПлощадьColumn As DataColumn
            Get
                Return Me.columnОбщаяПлощадь
            End Get
        End Property
        
        Friend ReadOnly Property ПлощЖилыхПомещColumn As DataColumn
            Get
                Return Me.columnПлощЖилыхПомещ
            End Get
        End Property
        
        Friend ReadOnly Property НаличиеКолонкиColumn As DataColumn
            Get
                Return Me.columnНаличиеКолонки
            End Get
        End Property
        
        Friend ReadOnly Property Квартира_IdColumn As DataColumn
            Get
                Return Me.columnКвартира_Id
            End Get
        End Property
        
        Friend ReadOnly Property Этаж_IdColumn As DataColumn
            Get
                Return Me.columnЭтаж_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As КвартираRow
            Get
                Return CType(Me.Rows(index),КвартираRow)
            End Get
        End Property
        
        Public Event КвартираRowChanged As КвартираRowChangeEventHandler
        
        Public Event КвартираRowChanging As КвартираRowChangeEventHandler
        
        Public Event КвартираRowDeleted As КвартираRowChangeEventHandler
        
        Public Event КвартираRowDeleting As КвартираRowChangeEventHandler
        
        Public Overloads Sub AddКвартираRow(ByVal row As КвартираRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddКвартираRow(ByVal НомерКвартиры As Long, ByVal ОбщаяПлощадь As Single, ByVal ПлощЖилыхПомещ As Single, ByVal НаличиеКолонки As Boolean, ByVal parentЭтажRowByЭтаж_Квартира As ЭтажRow) As КвартираRow
            Dim rowКвартираRow As КвартираRow = CType(Me.NewRow,КвартираRow)
            rowКвартираRow.ItemArray = New Object() {НомерКвартиры, ОбщаяПлощадь, ПлощЖилыхПомещ, НаличиеКолонки, Nothing, parentЭтажRowByЭтаж_Квартира(3)}
            Me.Rows.Add(rowКвартираRow)
            Return rowКвартираRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As КвартираDataTable = CType(MyBase.Clone,КвартираDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New КвартираDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnНомерКвартиры = Me.Columns("НомерКвартиры")
            Me.columnОбщаяПлощадь = Me.Columns("ОбщаяПлощадь")
            Me.columnПлощЖилыхПомещ = Me.Columns("ПлощЖилыхПомещ")
            Me.columnНаличиеКолонки = Me.Columns("НаличиеКолонки")
            Me.columnКвартира_Id = Me.Columns("Квартира_Id")
            Me.columnЭтаж_Id = Me.Columns("Этаж_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnНомерКвартиры = New DataColumn("НомерКвартиры", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnНомерКвартиры)
            Me.columnОбщаяПлощадь = New DataColumn("ОбщаяПлощадь", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnОбщаяПлощадь)
            Me.columnПлощЖилыхПомещ = New DataColumn("ПлощЖилыхПомещ", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnПлощЖилыхПомещ)
            Me.columnНаличиеКолонки = New DataColumn("НаличиеКолонки", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnНаличиеКолонки)
            Me.columnКвартира_Id = New DataColumn("Квартира_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnКвартира_Id)
            Me.columnЭтаж_Id = New DataColumn("Этаж_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnЭтаж_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnКвартира_Id}, true))
            Me.columnНомерКвартиры.Namespace = ""
            Me.columnОбщаяПлощадь.Namespace = ""
            Me.columnПлощЖилыхПомещ.Namespace = ""
            Me.columnНаличиеКолонки.Namespace = ""
            Me.columnКвартира_Id.AutoIncrement = true
            Me.columnКвартира_Id.AllowDBNull = false
            Me.columnКвартира_Id.Unique = true
        End Sub
        
        Public Function NewКвартираRow() As КвартираRow
            Return CType(Me.NewRow,КвартираRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New КвартираRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(КвартираRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.КвартираRowChangedEvent) Is Nothing) Then
                RaiseEvent КвартираRowChanged(Me, New КвартираRowChangeEvent(CType(e.Row,КвартираRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.КвартираRowChangingEvent) Is Nothing) Then
                RaiseEvent КвартираRowChanging(Me, New КвартираRowChangeEvent(CType(e.Row,КвартираRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.КвартираRowDeletedEvent) Is Nothing) Then
                RaiseEvent КвартираRowDeleted(Me, New КвартираRowChangeEvent(CType(e.Row,КвартираRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.КвартираRowDeletingEvent) Is Nothing) Then
                RaiseEvent КвартираRowDeleting(Me, New КвартираRowChangeEvent(CType(e.Row,КвартираRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveКвартираRow(ByVal row As КвартираRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КвартираRow
        Inherits DataRow
        
        Private tableКвартира As КвартираDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableКвартира = CType(Me.Table,КвартираDataTable)
        End Sub
        
        Public Property НомерКвартиры As Long
            Get
                Try 
                    Return CType(Me(Me.tableКвартира.НомерКвартирыColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКвартира.НомерКвартирыColumn) = value
            End Set
        End Property
        
        Public Property ОбщаяПлощадь As Single
            Get
                Try 
                    Return CType(Me(Me.tableКвартира.ОбщаяПлощадьColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКвартира.ОбщаяПлощадьColumn) = value
            End Set
        End Property
        
        Public Property ПлощЖилыхПомещ As Single
            Get
                Try 
                    Return CType(Me(Me.tableКвартира.ПлощЖилыхПомещColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКвартира.ПлощЖилыхПомещColumn) = value
            End Set
        End Property
        
        Public Property НаличиеКолонки As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableКвартира.НаличиеКолонкиColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКвартира.НаличиеКолонкиColumn) = value
            End Set
        End Property
        
        Public Property ЭтажRow As ЭтажRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Этаж_Квартира")),ЭтажRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Этаж_Квартира"))
            End Set
        End Property
        
        Public Function IsНомерКвартирыNull() As Boolean
            Return Me.IsNull(Me.tableКвартира.НомерКвартирыColumn)
        End Function
        
        Public Sub SetНомерКвартирыNull()
            Me(Me.tableКвартира.НомерКвартирыColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsОбщаяПлощадьNull() As Boolean
            Return Me.IsNull(Me.tableКвартира.ОбщаяПлощадьColumn)
        End Function
        
        Public Sub SetОбщаяПлощадьNull()
            Me(Me.tableКвартира.ОбщаяПлощадьColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsПлощЖилыхПомещNull() As Boolean
            Return Me.IsNull(Me.tableКвартира.ПлощЖилыхПомещColumn)
        End Function
        
        Public Sub SetПлощЖилыхПомещNull()
            Me(Me.tableКвартира.ПлощЖилыхПомещColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsНаличиеКолонкиNull() As Boolean
            Return Me.IsNull(Me.tableКвартира.НаличиеКолонкиColumn)
        End Function
        
        Public Sub SetНаличиеКолонкиNull()
            Me(Me.tableКвартира.НаличиеКолонкиColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetКомнатаRows() As КомнатаRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Квартира_Комната")),КомнатаRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КвартираRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As КвартираRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As КвартираRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As КвартираRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КомнатаDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnНомерКомнаты As DataColumn
        
        Private columnПлощьКомнаты As DataColumn
        
        Private columnВысотаПотолков As DataColumn
        
        Private columnКоличОтопитПриборов As DataColumn
        
        Private columnКвартира_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Комната")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property НомерКомнатыColumn As DataColumn
            Get
                Return Me.columnНомерКомнаты
            End Get
        End Property
        
        Friend ReadOnly Property ПлощьКомнатыColumn As DataColumn
            Get
                Return Me.columnПлощьКомнаты
            End Get
        End Property
        
        Friend ReadOnly Property ВысотаПотолковColumn As DataColumn
            Get
                Return Me.columnВысотаПотолков
            End Get
        End Property
        
        Friend ReadOnly Property КоличОтопитПриборовColumn As DataColumn
            Get
                Return Me.columnКоличОтопитПриборов
            End Get
        End Property
        
        Friend ReadOnly Property Квартира_IdColumn As DataColumn
            Get
                Return Me.columnКвартира_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As КомнатаRow
            Get
                Return CType(Me.Rows(index),КомнатаRow)
            End Get
        End Property
        
        Public Event КомнатаRowChanged As КомнатаRowChangeEventHandler
        
        Public Event КомнатаRowChanging As КомнатаRowChangeEventHandler
        
        Public Event КомнатаRowDeleted As КомнатаRowChangeEventHandler
        
        Public Event КомнатаRowDeleting As КомнатаRowChangeEventHandler
        
        Public Overloads Sub AddКомнатаRow(ByVal row As КомнатаRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddКомнатаRow(ByVal НомерКомнаты As Long, ByVal ПлощьКомнаты As Single, ByVal ВысотаПотолков As Single, ByVal КоличОтопитПриборов As Long, ByVal parentКвартираRowByКвартира_Комната As КвартираRow) As КомнатаRow
            Dim rowКомнатаRow As КомнатаRow = CType(Me.NewRow,КомнатаRow)
            rowКомнатаRow.ItemArray = New Object() {НомерКомнаты, ПлощьКомнаты, ВысотаПотолков, КоличОтопитПриборов, parentКвартираRowByКвартира_Комната(4)}
            Me.Rows.Add(rowКомнатаRow)
            Return rowКомнатаRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As КомнатаDataTable = CType(MyBase.Clone,КомнатаDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New КомнатаDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnНомерКомнаты = Me.Columns("НомерКомнаты")
            Me.columnПлощьКомнаты = Me.Columns("ПлощьКомнаты")
            Me.columnВысотаПотолков = Me.Columns("ВысотаПотолков")
            Me.columnКоличОтопитПриборов = Me.Columns("КоличОтопитПриборов")
            Me.columnКвартира_Id = Me.Columns("Квартира_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnНомерКомнаты = New DataColumn("НомерКомнаты", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnНомерКомнаты)
            Me.columnПлощьКомнаты = New DataColumn("ПлощьКомнаты", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnПлощьКомнаты)
            Me.columnВысотаПотолков = New DataColumn("ВысотаПотолков", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnВысотаПотолков)
            Me.columnКоличОтопитПриборов = New DataColumn("КоличОтопитПриборов", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnКоличОтопитПриборов)
            Me.columnКвартира_Id = New DataColumn("Квартира_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnКвартира_Id)
            Me.columnНомерКомнаты.Namespace = ""
            Me.columnПлощьКомнаты.Namespace = ""
            Me.columnВысотаПотолков.Namespace = ""
            Me.columnКоличОтопитПриборов.Namespace = ""
        End Sub
        
        Public Function NewКомнатаRow() As КомнатаRow
            Return CType(Me.NewRow,КомнатаRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New КомнатаRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(КомнатаRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.КомнатаRowChangedEvent) Is Nothing) Then
                RaiseEvent КомнатаRowChanged(Me, New КомнатаRowChangeEvent(CType(e.Row,КомнатаRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.КомнатаRowChangingEvent) Is Nothing) Then
                RaiseEvent КомнатаRowChanging(Me, New КомнатаRowChangeEvent(CType(e.Row,КомнатаRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.КомнатаRowDeletedEvent) Is Nothing) Then
                RaiseEvent КомнатаRowDeleted(Me, New КомнатаRowChangeEvent(CType(e.Row,КомнатаRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.КомнатаRowDeletingEvent) Is Nothing) Then
                RaiseEvent КомнатаRowDeleting(Me, New КомнатаRowChangeEvent(CType(e.Row,КомнатаRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveКомнатаRow(ByVal row As КомнатаRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КомнатаRow
        Inherits DataRow
        
        Private tableКомната As КомнатаDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableКомната = CType(Me.Table,КомнатаDataTable)
        End Sub
        
        Public Property НомерКомнаты As Long
            Get
                Try 
                    Return CType(Me(Me.tableКомната.НомерКомнатыColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКомната.НомерКомнатыColumn) = value
            End Set
        End Property
        
        Public Property ПлощьКомнаты As Single
            Get
                Try 
                    Return CType(Me(Me.tableКомната.ПлощьКомнатыColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКомната.ПлощьКомнатыColumn) = value
            End Set
        End Property
        
        Public Property ВысотаПотолков As Single
            Get
                Try 
                    Return CType(Me(Me.tableКомната.ВысотаПотолковColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКомната.ВысотаПотолковColumn) = value
            End Set
        End Property
        
        Public Property КоличОтопитПриборов As Long
            Get
                Try 
                    Return CType(Me(Me.tableКомната.КоличОтопитПриборовColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКомната.КоличОтопитПриборовColumn) = value
            End Set
        End Property
        
        Public Property КвартираRow As КвартираRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Квартира_Комната")),КвартираRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Квартира_Комната"))
            End Set
        End Property
        
        Public Function IsНомерКомнатыNull() As Boolean
            Return Me.IsNull(Me.tableКомната.НомерКомнатыColumn)
        End Function
        
        Public Sub SetНомерКомнатыNull()
            Me(Me.tableКомната.НомерКомнатыColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsПлощьКомнатыNull() As Boolean
            Return Me.IsNull(Me.tableКомната.ПлощьКомнатыColumn)
        End Function
        
        Public Sub SetПлощьКомнатыNull()
            Me(Me.tableКомната.ПлощьКомнатыColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsВысотаПотолковNull() As Boolean
            Return Me.IsNull(Me.tableКомната.ВысотаПотолковColumn)
        End Function
        
        Public Sub SetВысотаПотолковNull()
            Me(Me.tableКомната.ВысотаПотолковColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsКоличОтопитПриборовNull() As Boolean
            Return Me.IsNull(Me.tableКомната.КоличОтопитПриборовColumn)
        End Function
        
        Public Sub SetКоличОтопитПриборовNull()
            Me(Me.tableКомната.КоличОтопитПриборовColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КомнатаRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As КомнатаRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As КомнатаRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As КомнатаRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КрышаDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnТипКровли As DataColumn
        
        Private columnПлощадьКровли As DataColumn
        
        Private columnДом_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Крыша")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ТипКровлиColumn As DataColumn
            Get
                Return Me.columnТипКровли
            End Get
        End Property
        
        Friend ReadOnly Property ПлощадьКровлиColumn As DataColumn
            Get
                Return Me.columnПлощадьКровли
            End Get
        End Property
        
        Friend ReadOnly Property Дом_IdColumn As DataColumn
            Get
                Return Me.columnДом_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As КрышаRow
            Get
                Return CType(Me.Rows(index),КрышаRow)
            End Get
        End Property
        
        Public Event КрышаRowChanged As КрышаRowChangeEventHandler
        
        Public Event КрышаRowChanging As КрышаRowChangeEventHandler
        
        Public Event КрышаRowDeleted As КрышаRowChangeEventHandler
        
        Public Event КрышаRowDeleting As КрышаRowChangeEventHandler
        
        Public Overloads Sub AddКрышаRow(ByVal row As КрышаRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddКрышаRow(ByVal ТипКровли As String, ByVal ПлощадьКровли As Single, ByVal parentДомRowByДом_Крыша As ДомRow) As КрышаRow
            Dim rowКрышаRow As КрышаRow = CType(Me.NewRow,КрышаRow)
            rowКрышаRow.ItemArray = New Object() {ТипКровли, ПлощадьКровли, parentДомRowByДом_Крыша(3)}
            Me.Rows.Add(rowКрышаRow)
            Return rowКрышаRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As КрышаDataTable = CType(MyBase.Clone,КрышаDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New КрышаDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnТипКровли = Me.Columns("ТипКровли")
            Me.columnПлощадьКровли = Me.Columns("ПлощадьКровли")
            Me.columnДом_Id = Me.Columns("Дом_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnТипКровли = New DataColumn("ТипКровли", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnТипКровли)
            Me.columnПлощадьКровли = New DataColumn("ПлощадьКровли", GetType(System.Single), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnПлощадьКровли)
            Me.columnДом_Id = New DataColumn("Дом_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnДом_Id)
            Me.columnТипКровли.Namespace = ""
            Me.columnПлощадьКровли.Namespace = ""
        End Sub
        
        Public Function NewКрышаRow() As КрышаRow
            Return CType(Me.NewRow,КрышаRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New КрышаRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(КрышаRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.КрышаRowChangedEvent) Is Nothing) Then
                RaiseEvent КрышаRowChanged(Me, New КрышаRowChangeEvent(CType(e.Row,КрышаRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.КрышаRowChangingEvent) Is Nothing) Then
                RaiseEvent КрышаRowChanging(Me, New КрышаRowChangeEvent(CType(e.Row,КрышаRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.КрышаRowDeletedEvent) Is Nothing) Then
                RaiseEvent КрышаRowDeleted(Me, New КрышаRowChangeEvent(CType(e.Row,КрышаRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.КрышаRowDeletingEvent) Is Nothing) Then
                RaiseEvent КрышаRowDeleting(Me, New КрышаRowChangeEvent(CType(e.Row,КрышаRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveКрышаRow(ByVal row As КрышаRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КрышаRow
        Inherits DataRow
        
        Private tableКрыша As КрышаDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableКрыша = CType(Me.Table,КрышаDataTable)
        End Sub
        
        Public Property ТипКровли As String
            Get
                Try 
                    Return CType(Me(Me.tableКрыша.ТипКровлиColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКрыша.ТипКровлиColumn) = value
            End Set
        End Property
        
        Public Property ПлощадьКровли As Single
            Get
                Try 
                    Return CType(Me(Me.tableКрыша.ПлощадьКровлиColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableКрыша.ПлощадьКровлиColumn) = value
            End Set
        End Property
        
        Public Property ДомRow As ДомRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Дом_Крыша")),ДомRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Дом_Крыша"))
            End Set
        End Property
        
        Public Function IsТипКровлиNull() As Boolean
            Return Me.IsNull(Me.tableКрыша.ТипКровлиColumn)
        End Function
        
        Public Sub SetТипКровлиNull()
            Me(Me.tableКрыша.ТипКровлиColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsПлощадьКровлиNull() As Boolean
            Return Me.IsNull(Me.tableКрыша.ПлощадьКровлиColumn)
        End Function
        
        Public Sub SetПлощадьКровлиNull()
            Me(Me.tableКрыша.ПлощадьКровлиColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class КрышаRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As КрышаRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As КрышаRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As КрышаRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
